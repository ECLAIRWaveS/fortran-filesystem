name: ci_cmake

env:
    HOMEBREW_NO_INSTALL_CLEANUP: 1

on:
  push:
    paths:
      - "**.f90"
      - "**.c"
      - "**.cpp"
      - "**/CMakeLists.txt"
      - "**.cmake"
      - ".github/workflows/ci_cmake.yml"
      - "!cray.cmake"
      - "!concepts/"


jobs:

  linux-gcc:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        gcc-version: [8, 9, 10, 11]
        shared: [true, false]
        cpp: [true, false]
        exclude:
        - cpp: false
          shared: true
        - gcc-version: 8
          shared: true
        include:
        - gcc-version: 7
          cpp: false
          shared: false

    env:
      CC: gcc-${{ matrix.gcc-version }}
      CXX: g++-${{ matrix.gcc-version }}
      FC: gfortran-${{ matrix.gcc-version }}

    steps:

    - name: install compilers
      run: |
        sudo apt update
        sudo apt install --no-install-recommends ninja-build gcc-${{ matrix.gcc-version }} g++-${{ matrix.gcc-version }} gfortran-${{ matrix.gcc-version }}

    - uses: actions/checkout@v3

    - name: config cpp=${{ matrix.cpp }} shared=${{ matrix.shared }}
      run: >-
        cmake
        --preset multi
        --install-prefix=${{ runner.temp }}
        -Dcpp:BOOL=${{ matrix.cpp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug

    - run: cmake --build --preset release
    - run: ctest --preset release

    - name: install package
      run: cmake --install build

    - name: example config
      run: >-
        cmake
        --preset default
        -GNinja
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example


  linux-clang:
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    strategy:
      matrix:
        clang-version: [11, 12, 13, 14]
        shared: [true, false]
        cpp: [true, false]
        exclude:
        - cpp: false
          shared: true

    env:
      CC: clang-${{ matrix.clang-version }}
      CXX: clang++-${{ matrix.clang-version }}
      FC: gfortran

    steps:

    - name: install compilers
      run: |
        sudo apt update
        sudo apt install --no-install-recommends ninja-build clang-${{ matrix.clang-version }}

    - uses: actions/checkout@v3

    - name: config cpp=${{ matrix.cpp }} shared=${{ matrix.shared }}
      run: >-
        cmake
        --preset multi
        --install-prefix=${{ runner.temp }}
        -Dcpp:BOOL=${{ matrix.cpp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug

    - run: cmake --build --preset release
    - run: ctest --preset release

    - name: install package
      run: cmake --install build

    - name: example config
      run: >-
        cmake
        --preset default
        -GNinja
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example


  valgrind-memory:
    runs-on: ubuntu-latest
    needs: linux-gcc
    timeout-minutes: 10

    strategy:
      matrix:
        cpp: [true, false]

    steps:

    - name: install valgrind
      run: |
        sudo apt update
        sudo apt install --no-install-recommends valgrind

    - uses: actions/checkout@v3

    - run: ctest -Dopts="-Dcpp:BOOL=${{ matrix.cpp }}" -S memcheck.cmake -V


# disabled coverage due to broken Jinja import
  # linux-coverage:
  #   runs-on: ubuntu-latest
  #   needs: linux-gcc
  #   timeout-minutes: 10

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.9'

  #   - name: install Gcovr
  #     run: pip install gcovr

  #   - run: cmake --preset coverage
  #   - run: cmake --build --preset coverage

  #   - name: Code coverage
  #     run: cmake --build --preset run-coverage

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: coverage-report-html
  #       path: build-coverage/coverage/


  mac:
    runs-on: macos-latest
    needs: linux-clang
    timeout-minutes: 10

    strategy:
      matrix:
        compiler: [ {cpp: g++, c: gcc}, {cpp: clang++, c: clang} ]
        shared: [true, false]
        cpp: [true, false]
        exclude:
        - shared: true
          cpp: false
        - shared: true
          compiler: {cpp: g++, c: gcc}

    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cpp }}

    steps:

    - run: |
        brew install ninja
        brew reinstall gcc

    - uses: actions/checkout@v3

    - name: config cpp=${{ matrix.cpp }} shared=${{ matrix.shared }}
      run: >-
        cmake
        --preset multi
        --install-prefix=${{ runner.temp }}
        -Dcpp:BOOL=${{ matrix.cpp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug

    - run: cmake --build --preset release
    - run: ctest --preset release

    - name: install package
      run: cmake --install build

    - name: example config
      run: >-
        cmake
        --preset default
        -GNinja
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example


  windows:
    runs-on: windows-latest
    needs: linux-gcc
    timeout-minutes: 10

    strategy:
      matrix:
        shared: [false]
        cpp: [true, false]
      # github actions generally broken for shared lib, even when exe in cwd

    env:
      CMAKE_GENERATOR: Ninja

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-gcc-fortran

    - name: Put MSYS2_MinGW64 on PATH
      run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/checkout@v3

    - name: config cpp=${{ matrix.cpp }} shared=${{ matrix.shared }}
      run: >-
        cmake
        --preset multi
        --install-prefix=${{ runner.temp }}
        -Dcpp:BOOL=${{ matrix.cpp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: Build Debug
      run: cmake --build --preset debug
    - name: Test Debug
      run: ctest --preset debug

    - name: Build Release
      run: cmake --build --preset release
    - name: Test Release
      run: ctest --preset release

    - name: install package
      run: cmake --install build

    - name: example config
      run: >-
        cmake
        --preset default
        -GNinja
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example


  windows-msvc:
    runs-on: windows-latest
    timeout-minutes: 10

    strategy:
      matrix:
        shared: [true, false]
        cpp: [true, false]

    steps:
    - uses: actions/checkout@v3

    - name: config cpp=${{ matrix.cpp }} shared=${{ matrix.shared }}
      run: >-
        cmake
        --preset default
        --install-prefix=${{ runner.temp }}
        -Dfortran:BOOL=off

    - name: Build Debug
      run: cmake --build --preset default --config Debug --parallel
    - name: Test Debug
      run: ctest --preset default -C Debug
    - name: Install Debug
      run: cmake --install build --config Debug

    - name: Build Release
      run: cmake --build --preset default --config Release --parallel
    - name: Test Release
      run: ctest --preset default -C Release
    - name: Install Release
      run: cmake --install build --config Release

    - name: example config
      run: >-
        cmake
        --preset default
        -Dfortran:BOOL=no
        -DCMAKE_PREFIX_PATH=${{ runner.temp }}
        -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}
      working-directory: example

    - name: example build
      run: cmake --build --preset default --parallel
      working-directory: example

    - name: example test
      run: ctest --preset default
      working-directory: example
