name: ci_cmake

env:
    HOMEBREW_NO_INSTALL_CLEANUP: 1

on:
  push:
    paths:
      - "**.f90"
      - "**.c"
      - "**.cpp"
      - "**/CMakeLists.txt"
      - "**.cmake"
      - ".github/workflows/ci_cmake.yml"
      - "!cray.cmake"


jobs:

  linux-gcc:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        gcc-version: [8, 9, 10, 11]
        shared: [true, false]
        fallback: [true, false]
        exclude:
        - fallback: true
          shared: true
        - gcc-version: 8
          shared: true
        include:
        - gcc-version: 7
          fallback: true
          shared: false

    env:
      CC: gcc-${{ matrix.gcc-version }}
      CXX: g++-${{ matrix.gcc-version }}
      FC: gfortran-${{ matrix.gcc-version }}

    steps:
    - uses: actions/checkout@v3

    - name: install compilers
      run: |
        sudo apt update
        sudo apt install ninja-build gcc-${{ matrix.gcc-version }} g++-${{ matrix.gcc-version }} gfortran-${{ matrix.gcc-version }}

    - name: config fallback=${{ matrix.fallback }} shared=${{ matrix.shared }}
      run: cmake --preset multi --install-prefix=${{ runner.temp }} -Dfallback:BOOL=${{ matrix.fallback }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug -V

    - run: cmake --build --preset release
    - run: ctest --preset release -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B example/build -S example/ -DCMAKE_PREFIX_PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: example build
      run: cmake --build example/build --parallel

    - name: example test
      run: ctest --test-dir example/build -V


  linux-clang:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        clang-version: ["6.0", 7, 8, 9, 10]
        shared: [true, false]
        fallback: [true, false]
        exclude:
        - fallback: false
          clang-version: "6.0"
        - fallback: true
          shared: true

    env:
      CC: clang-${{ matrix.clang-version }}
      CXX: clang++-${{ matrix.clang-version }}
      FC: gfortran

    steps:
    - uses: actions/checkout@v3

    - name: install compilers
      run: |
        sudo apt update
        sudo apt install ninja-build clang-${{ matrix.clang-version }}

    - name: config fallback=${{ matrix.fallback }} shared=${{ matrix.shared }}
      run: cmake --preset multi --install-prefix=${{ runner.temp }} -Dfallback:BOOL=${{ matrix.fallback }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug -V

    - run: cmake --build --preset release
    - run: ctest --preset release -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B example/build -S example/ -DCMAKE_PREFIX_PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: example build
      run: cmake --build example/build --parallel

    - name: example test
      run: ctest --test-dir example/build -V


  valgrind-memory:
    runs-on: ubuntu-latest
    needs: linux-gcc
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3

    - name: install valgrind
      run: |
        sudo apt update
        sudo apt install --no-install-recommends valgrind

    - run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug
    - run: cmake --build build --parallel

    - name: Memory leak check
      run: ctest -T memcheck --test-dir build -V


# disabled coverage due to broken Jinja import
  # linux-coverage:
  #   runs-on: ubuntu-latest
  #   needs: linux-gcc
  #   timeout-minutes: 10

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.9'

  #   - name: install Gcovr
  #     run: pip install gcovr

  #   - run: cmake --preset coverage
  #   - run: cmake --build --preset coverage

  #   - name: Code coverage
  #     run: cmake --build --preset run-coverage

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: coverage-report-html
  #       path: build-coverage/coverage/


  mac:
    runs-on: macos-latest
    needs: linux-clang
    timeout-minutes: 10

    strategy:
      matrix:
        compiler: [ {cpp: g++-11, c: gcc-11}, {cpp: clang++, c: clang} ]
        shared: [true, false]
        fallback: [true, false]
        exclude:
        - shared: true
          fallback: true
        - shared: true
          compiler: {cpp: g++-11, c: gcc-11}

    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cpp }}

    steps:
    - uses: actions/checkout@v3

    - run: |
        brew install ninja
        brew reinstall gcc

    - name: config fallback=${{ matrix.fallback }} shared=${{ matrix.shared }}
      run: cmake --preset multi --install-prefix=${{ runner.temp }} -Dfallback:BOOL=${{ matrix.fallback }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug -V

    - run: cmake --build --preset release
    - run: ctest --preset release -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B example/build -S example/ -DCMAKE_PREFIX_PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: example build
      run: cmake --build example/build --parallel

    - name: example test
      run: ctest --test-dir example/build -V


  windows:
    runs-on: windows-latest
    needs: linux-gcc
    timeout-minutes: 10

    strategy:
      matrix:
        shared: [true, false]
        fallback: [true, false]
        exclude:
        # just saving CI resources
        - fallback: true
          shared: true

    env:
      CMAKE_GENERATOR: Ninja

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-gcc-fortran

    - name: Put MSYS2_MinGW64 on PATH
      run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: actions/checkout@v3

    - name: config fallback=${{ matrix.fallback }} shared=${{ matrix.shared }}
      run: cmake --preset multi --install-prefix=${{ runner.temp }} -Dfallback:BOOL=${{ matrix.fallback }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - run: cmake --build --preset debug
    - run: ctest --preset debug -V

    - run: cmake --build --preset release
    - run: ctest --preset release -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B example/build -S example/ -DCMAKE_PREFIX_PATH=${{ runner.temp }} -DBUILD_SHARED_LIBS:BOOL=${{ matrix.shared }}

    - name: example build
      run: cmake --build example/build

    - name: example test
      run: ctest --test-dir example/build -V
