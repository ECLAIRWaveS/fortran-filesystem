name: intel-oneapi

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  CTEST_PARALLEL_LEVEL: 2
  CC: icx
  FC: ifx

on:
  push:
    paths:
      - "**.f90"
      - "**.F90"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - ".github/workflows/intel-oneapi.yml"


jobs:

  linux-intel-oneapi:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI
      timeout-minutes: 10
      run: sudo apt-get install ninja-build intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake --preset multi --install-prefix=${HOME}

    - name: print config log
      if: ${{ failure() }}
      run: cat build/CMakeFiles/CMakeError.log

    - name: Release build
      run: cmake --build --preset release
    - name: Release unit test
      run: ctest --preset release --schedule-random -V

    - name: debug build
      run: cmake --build --preset debug
    - name: debug unit test
      run: ctest --preset debug --schedule-random -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B examples/build -S examples/ -Dffilesystem_ROOT=${HOME}

    - name: example build
      run: cmake --build examples/build

    - name: example test
      run: ctest --test-dir examples/build -V

# NOTE: as with any C++ / Fortran program with Intel compiler,
# need to have GCC environment carefully set
# so that underlying libstdc++ is compatible.
    # - name: shared config
    #   run: cmake -B builds -DBUILD_SHARED_LIBS:BOOL=on

    # - name: shared build
    #   run: cmake --build builds || cmake --build builds -v

    # - name: shared test
    #   run: ctest --test-dir builds -V
