name: oneapi-linux

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  CTEST_PARALLEL_LEVEL: 2
  CC: icx
  FC: ifx
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18497/w_BaseKit_p_2022.1.2.154_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18417/w_HPCKit_p_2022.1.0.93_offline.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18487/l_BaseKit_p_2022.1.2.146_offline.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18479/l_HPCKit_p_2022.1.2.117_offline.sh
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18341/m_HPCKit_p_2022.1.0.86_offline.dmg
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  LINUX_CPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
  LINUX_FORTRAN_COMPONENTS: intel-oneapi-compiler-fortran
  LINUX_DPCPP_COMPONENTS: intel-oneapi-compiler-dpcpp-cpp
  MACOS_CPP_COMPONENTS: intel.oneapi.mac.cpp-compiler
  MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler
# https://github.com/oneapi-src/oneapi-ci/blob/master/.github/workflows/build_all.yml

on:
  push:
    paths:
      - "**.f90"
      - "**.F90"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - ".github/workflows/intel-oneapi.yml"


jobs:

  linux-intel-oneapi:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: cache install oneAPI
      id: cache-install
      uses: actions/cache@v2
      with:
        path: |
          /opt/intel/oneapi
        key: install-${{ env.LINUX_HPCKIT_URL }}-${{ env.LINUX_CPP_COMPONENTS }}-${{ env.LINUX_FORTRAN_COMPONENTS }}-compiler

    - name: non-cache install oneAPI
      if: steps.cache-install.outputs.cache-hit != 'true'
      timeout-minutes: 5
      run: |
        .github/workflows/oneapi_setup_apt_repo_linux.sh
        sudo apt install ninja-build ${{ env.LINUX_CPP_COMPONENTS }} ${{ env.LINUX_FORTRAN_COMPONENTS }}

    - name: oneAPI env vars
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV


    - name: Configure CMake
      timeout-minutes: 1
      run: cmake --preset multi --install-prefix=${HOME}

    - name: print config log
      if: ${{ failure() }}
      run: cat build/CMakeFiles/CMakeError.log

    - name: Release build
      run: cmake --build --preset release
    - name: Release unit test
      run: ctest --preset release --schedule-random -V

    - name: debug build
      run: cmake --build --preset debug
    - name: debug unit test
      run: ctest --preset debug --schedule-random -V

    - name: install package
      run: cmake --install build

    - name: example config
      run: cmake -B examples/build -S examples/ -Dffilesystem_ROOT=${HOME}

    - name: example build
      run: cmake --build examples/build

    - name: example test
      run: ctest --test-dir examples/build -V

# NOTE: as with any C++ / Fortran program with Intel compiler,
# need to have GCC environment carefully set
# so that underlying libstdc++ is compatible.
    # - name: shared config
    #   run: cmake -B builds -DBUILD_SHARED_LIBS:BOOL=on

    # - name: shared build
    #   run: cmake --build builds || cmake --build builds -v

    # - name: shared test
    #   run: ctest --test-dir builds -V

    - name: exclude unused files from cache
      if: steps.cache-install.outputs.cache-hit != 'true'
      run: .github/workflows/oneapi_cache_exclude_linux.sh
